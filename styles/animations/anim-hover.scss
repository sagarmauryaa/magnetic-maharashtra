/*
* Hovers
*
* Please note the distinction between a Wrapper and a Container:
* A wrapper is a tag that is the immediate parent of the animating element.
* (e.g., images require a wrapper layer between them and the container)
*
* A container is a tag that may or may not be the immediate parent of the animating element, but contains it. 
* (e.g., hoverArrows don't have a wrapper, but a container has been required for the animation. A hover on the entire link causes the arrow to animate.) 
*
* All animations have a mandatory parent defined as the container, but not all animations require a wrapper
*/
/* Hover Image */
@mixin hoverImageChangeProperties {
    will-change: opacity;
    transition-property: opacity !important;
    transition-timing-function: $sineOut !important;
    transition-duration: 0.12s !important;
}
@mixin hoverImageTransitionProperties {
    transition-timing-function: linear !important;
    transition-duration: 0.24s !important;
}
@mixin hoverImageEndState {
    transform: scale(1.012);
}
@media (hover: hover) {
    .anim-hoverFadeContainer {
        cursor: pointer;
    }
    /* Hover Fade */
    .anim-hoverFadeContainer .anim-hoverFade,
    .anim-hoverFade {
        /* Rest State */
        opacity: 1;
        transition: opacity 0.2s ease;
    }
    .anim-hoverFadeContainer:hover .anim-hoverFade,
    .anim-hoverFade:hover {
        /* Hover State */
        opacity: 0.6 !important;
    }
    /* Hover Underline */
    .anim-hoverUnderlineContainer {
        /* Rest State */
        .anim-hoverUnderline {
            position: relative;
            opacity: 1;
            transition: opacity 0.5s ease;
        }
        .anim-hoverUnderline::after {
            content: "";
            position: absolute;
            top: calc(100% + 1px);
            left: 0;
            width: 100%;
            height: 1px;
            background-color: currentColor;
            transform: scaleX(0);
            transform-origin: top right;
            transition: transform 0.6s cubic-bezier(0.19, 1, 0.22, 1);
        }
    }
    .anim-hoverUnderlineContainer:hover {
        /* Hover State */
        .anim-hoverUnderline {
            opacity: 0.6;
        }
        .anim-hoverUnderline::after {
            transform: scaleX(1);
            transform-origin: top left;
        }
    }
    /* Hover Arrow */
    .anim-hoverArrowContainer:hover {
        /* Hover State */
        .anim-hoverArrow {
            animation-name: animateArrowOnMouseover;
            animation-fill-mode: forwards;
            animation-timing-function: $sineOut;
            animation-duration: 0.6s;
        }
    }
    /* Hover Box Arrow */
    .anim-hoverBoxArrowContainer:hover {
        background-color: black;
        transition: background-color 0.1s cubic-bezier(0.26, 1, 0.48, 1);
        color: white;
        path {
            fill: white;
        }
        .anim-hoverBoxArrowWrapper {
            overflow: hidden;
            &.c-button__arrowWrapper {
				border-left: 1px solid #fff;
			}
        }
        /* Hover State */
        .anim-hoverBoxArrow {
            animation-name: animateArrowOnMouseover;
            animation-fill-mode: forwards;
            animation-timing-function: $sineOut;
            animation-duration: 0.6s;
        }
    }
    @keyframes animateArrowOnMouseover {
        0% {
            opacity: 1;
            transform: translateX(0);
        }
        50% {
            opacity: 0;
            transform: translate3d(8px, 0, 0);
        }
        51% {
            opacity: 0;
            transform: translate3d(-8px, 0, 0);
        }
        100% {
            opacity: 1;
            transform: translateX(0);
        }
    }
}
